<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>redis on Feng Zhenbing's Blog</title><link>https://fengzhenbing.github.io/posts/redis/</link><description>Recent content in redis on Feng Zhenbing's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2020 08:06:25 +0600</lastBuildDate><atom:link href="https://fengzhenbing.github.io/posts/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>redis应用场景</title><link>https://fengzhenbing.github.io/posts/redis/content/redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link><pubDate>Sun, 13 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/posts/redis/content/redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid><description>一.业务数据缓存 经典用法。
通用数据缓存，string，int，list，map等。 实时热数据，最新500条数据。 会话缓存，token缓存等。 二.业务数据处理 非严格一致性要求的数据:评论，点击等。 业务数据去重:订单处理的幂等校验等。 业务数据排序:排名，排行榜等。 三.全局一致计数 全局流控计数 秒杀的库存计算 抢红包 全局ID生成 四.高效统计计数 id去重，记录访问ip等全局bitmap操作 UV、PV等访问量==&amp;gt;非严格一致性要求 五.发布订阅与Stream Pub-Sub 模拟队列
Redis Stream 是 Redis 5.0 版本新增加的数据结构。 Redis Stream 主要用于消息队列(MQ，Message Queue)。
具体可以参考 https://www.runoob.com/redis/redis-stream.html
六.分布式锁 1、获取锁&amp;ndash;单个原子性操作
SET dlock my_random_value NX PX 30000 2、释放锁&amp;ndash;lua脚本-保证原子性+单线程，从而具有事务性
if redis.call(&amp;quot;get&amp;quot;,KEYS[1]) == ARGV[1] then return redis.call(&amp;quot;del&amp;quot;,KEYS[1]) else return 0 end 关键点:原子性、互斥、超时</description></item><item><title>redis数据结构</title><link>https://fengzhenbing.github.io/posts/redis/content/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Fri, 11 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/posts/redis/content/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>redis-benchmark 环境mac 4核8g mokernetdeMac-mini:redis-6.0.9 mokernet$ ./bin/redis-benchmark -n 100000 -c 32 -t SET,GET,INCR,HSET,LPUSH,MSET -q SET: 121065.38 requests per second GET: 118764.84 requests per second INCR: 117508.81 requests per second LPUSH: 123001.23 requests per second HSET: 123915.74 requests per second MSET (10 keys): 96711.80 requests per second redis的5种基本数据结构 https://redis.io/commands
1.字符串(string) 简单来说就是三种:int、string、byte[]
Redis中字符串类型的value最多可以容纳的数据长度是512M
set/get/getset/del/exists/append incr/decr/incrby/decrby 2.散列(hash) Redis中的Hash类型可以看成具有String key 和String value的map容器。
hset/hget/hmset/hmget/hgetall/hdel/hincrby hexists/hlen/hkeys/hvals hmset 相对于hset可一次设置多个键值对 hmget 相对于hget可一次获取多个键的值 3.列表(list) java的LinkedList
在Redis中，List类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表 一 样，我们可以在其头部(Left)和尾部(Right)添加新的元素。在插入时，如果该键并不存 在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除， 那么该键也将会被从数据库中删除。</description></item><item><title>安装redis</title><link>https://fengzhenbing.github.io/posts/redis/content/redis%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C/</link><pubDate>Thu, 10 Dec 2020 08:06:25 +0600</pubDate><guid>https://fengzhenbing.github.io/posts/redis/content/redis%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C/</guid><description>下载 https://redis.io/download
编译 wget https://download.redis.io/releases/redis-6.0.10.tar.gz tar xzf redis-6.0.10.tar.gz cd redis-6.0.10 sudo make 运行 #复制配置文件及命令 mkdir ./bin mkdir ./conf sudo cp ./src/mkreleasehdr.sh ./bin sudo cp ./src/redis-benchmark ./bin sudo cp ./src/redis-check-rdb ./bin sudo cp ./src/redis-cli ./bin sudo cp ./src/redis-server ./bin sudo cp ./redis.conf ./conf #运行 ./bin/redis-server ./conf/redis.conf 配置 redis.conf
#修改为守护模式 daemonize yes #设置进程锁文件 pidfile /usr/local/redis-4.0.11/redis.pid #端口 port 6379 #客户端超时时间 timeout 300 #日志级别 loglevel debug #日志文件位置 logfile /usr/local/redis-4.0.11/log-redis.log #设置数据库的数量，默认数据库为0，可以使用SELECT &amp;lt;dbid&amp;gt;命令在连接上指定数据库id databases 16 ##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 #save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt; #Redis默认配置文件中提供了三个条件： save 900 1 save 300 10 save 60 10000 #指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间， #可以关闭该#选项，但会导致数据库文件变的巨大 rdbcompression yes #指定本地数据库文件名 dbfilename dump.</description></item></channel></rss>