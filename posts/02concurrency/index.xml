<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>concurrency on Feng Zhenbing's Blog</title><link>https://fengzhenbing.github.io/posts/02concurrency/</link><description>Recent content in concurrency on Feng Zhenbing's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 09 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fengzhenbing.github.io/posts/02concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Synchronized锁</title><link>https://fengzhenbing.github.io/posts/02concurrency/content/%E9%94%81synchronized/</link><pubDate>Tue, 15 Dec 2020 20:26:25 +0600</pubDate><guid>https://fengzhenbing.github.io/posts/02concurrency/content/%E9%94%81synchronized/</guid><description>Synchronized Object.wait()：释放当前对象锁，并进入阻塞队列(wait set) Object.notify()：唤醒当前对象阻塞队列(wait set)里的任一线程（并不保证唤醒哪一个） Object.notifyAll()：唤醒当前对象阻塞队列(wait set)里的所有线程, 进到entry set 去竞争锁 为什么wait,notify和notifyAll要与synchronized一起使用？ Wait 只有通过synchronized拿到锁，才能进入wait set
notify notifyAll只有通过synchronized拿到锁，才能去唤醒 wait set 里线程 到entry set
object monitor 对象在内存中的存储 Markword 32位jvm 结构如下： 重量级锁即为 Synchronized 的锁
![image-20210418232331824](/Users/mokernet/Library/Application Support/typora-user-images/image-20210418232331824.png)
锁升级 参考 https://mp.weixin.qq.com/s/2yxexZUr5MWdMZ02GCSwdA</description></item><item><title>Disruptor高性能队列</title><link>https://fengzhenbing.github.io/posts/02concurrency/content/disruptor%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fengzhenbing.github.io/posts/02concurrency/content/disruptor%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97/</guid><description>Disruptor通过以下设计来解决队列速度慢的问题： 环形数组结构
元素位置定位
数组长度2^n， 位运算，加快定位的速度
无锁设计
Cas操作保证线程安全
参考 https://tech.meituan.com/2016/11/18/disruptor.html
https://blog.csdn.net/liweisnake/article/details/9113119</description></item></channel></rss>